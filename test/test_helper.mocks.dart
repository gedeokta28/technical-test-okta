// Mocks generated by Mockito 5.4.2 from annotations
// in technical_test_okta/test/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:connectivity_plus/connectivity_plus.dart' as _i6;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i8;
import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:technical_test_okta/core/data/datasources/dashboard_datasource.dart'
    as _i10;
import 'package:technical_test_okta/core/data/models/genre_movie_model.dart'
    as _i3;
import 'package:technical_test_okta/core/data/models/popular_movie_model.dart'
    as _i2;
import 'package:technical_test_okta/core/domain/entities/genre_movie.dart'
    as _i13;
import 'package:technical_test_okta/core/domain/entities/popular_movie.dart'
    as _i12;
import 'package:technical_test_okta/core/domain/repositories/dashboard_repository.dart'
    as _i5;
import 'package:technical_test_okta/core/domain/usecases/get_genre_movie.dart'
    as _i15;
import 'package:technical_test_okta/core/domain/usecases/get_popular_movie.dart'
    as _i14;
import 'package:technical_test_okta/core/errors/failures.dart' as _i11;
import 'package:technical_test_okta/core/network/network_info.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePopularMovieModel_0 extends _i1.SmartFake
    implements _i2.PopularMovieModel {
  _FakePopularMovieModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGenreMovieModel_1 extends _i1.SmartFake
    implements _i3.GenreMovieModel {
  _FakeGenreMovieModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDashboardRepository_3 extends _i1.SmartFake
    implements _i5.DashboardRepository {
  _FakeDashboardRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i6.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i8.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i7.Stream<_i8.ConnectivityResult>.empty(),
      ) as _i7.Stream<_i8.ConnectivityResult>);

  @override
  _i7.Future<_i8.ConnectivityResult> checkConnectivity() => (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i7.Future<_i8.ConnectivityResult>.value(
            _i8.ConnectivityResult.bluetooth),
      ) as _i7.Future<_i8.ConnectivityResult>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i9.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [DashboardDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockDashboardDataSource extends _i1.Mock
    implements _i10.DashboardDataSource {
  MockDashboardDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.PopularMovieModel> fetchPopularMovie() => (super.noSuchMethod(
        Invocation.method(
          #fetchPopularMovie,
          [],
        ),
        returnValue:
            _i7.Future<_i2.PopularMovieModel>.value(_FakePopularMovieModel_0(
          this,
          Invocation.method(
            #fetchPopularMovie,
            [],
          ),
        )),
      ) as _i7.Future<_i2.PopularMovieModel>);

  @override
  _i7.Future<_i3.GenreMovieModel> fetchGenreMovie() => (super.noSuchMethod(
        Invocation.method(
          #fetchGenreMovie,
          [],
        ),
        returnValue:
            _i7.Future<_i3.GenreMovieModel>.value(_FakeGenreMovieModel_1(
          this,
          Invocation.method(
            #fetchGenreMovie,
            [],
          ),
        )),
      ) as _i7.Future<_i3.GenreMovieModel>);
}

/// A class which mocks [DashboardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDashboardRepository extends _i1.Mock
    implements _i5.DashboardRepository {
  MockDashboardRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Either<_i11.Failure, _i12.PopularMovie>> fetchPopularMovie() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPopularMovie,
          [],
        ),
        returnValue:
            _i7.Future<_i4.Either<_i11.Failure, _i12.PopularMovie>>.value(
                _FakeEither_2<_i11.Failure, _i12.PopularMovie>(
          this,
          Invocation.method(
            #fetchPopularMovie,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i11.Failure, _i12.PopularMovie>>);

  @override
  _i7.Future<_i4.Either<_i11.Failure, _i13.GenreMovie>> fetchGenreMovie() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchGenreMovie,
          [],
        ),
        returnValue:
            _i7.Future<_i4.Either<_i11.Failure, _i13.GenreMovie>>.value(
                _FakeEither_2<_i11.Failure, _i13.GenreMovie>(
          this,
          Invocation.method(
            #fetchGenreMovie,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i11.Failure, _i13.GenreMovie>>);
}

/// A class which mocks [GetPopularMovie].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularMovie extends _i1.Mock implements _i14.GetPopularMovie {
  MockGetPopularMovie() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.DashboardRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDashboardRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.DashboardRepository);

  @override
  _i7.Future<_i4.Either<_i11.Failure, _i12.PopularMovie>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i7.Future<_i4.Either<_i11.Failure, _i12.PopularMovie>>.value(
                _FakeEither_2<_i11.Failure, _i12.PopularMovie>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i11.Failure, _i12.PopularMovie>>);
}

/// A class which mocks [GetGenreMovie].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetGenreMovie extends _i1.Mock implements _i15.GetGenreMovie {
  MockGetGenreMovie() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.DashboardRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDashboardRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.DashboardRepository);

  @override
  _i7.Future<_i4.Either<_i11.Failure, _i13.GenreMovie>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i7.Future<_i4.Either<_i11.Failure, _i13.GenreMovie>>.value(
                _FakeEither_2<_i11.Failure, _i13.GenreMovie>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i11.Failure, _i13.GenreMovie>>);
}
